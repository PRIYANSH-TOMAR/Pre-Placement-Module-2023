/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        
        ListNode p1=l1;
        ListNode p2=l2;
        
        ListNode tmp2=l2;
        ListNode head=null;
        
        if(l1==null&&l2==null)
            return null;
        
       if(l1==null)
           return l2;
        else if(l2==null)
            return l1;
        
        
        if(p1.val<=p2.val)
        {
            head=p1;
            p1=p1.next;
        }
        
        else if(p1.val>p2.val)
        {
            head=p2;
            p2=p2.next;
        }
        ListNode ele=head;
        while(true)
        {
            
             if(p1==null&&p2==null)  
                  break;
            
            
            if((p1!=null&&p2!=null&&(p1.val<=p2.val))||p2==null&&p1!=null)
            {
                ele.next=p1;
                ele=ele.next;
                p1=p1.next;
            }
            
            else if((p2!=null&&p1!=null&&(p2.val<p1.val))||p1==null&&p2!=null)
            {
                ele.next=p2;
                ele=ele.next;
                p2=p2.next;
            }
            
             
            
        }
        
        return head;
        
        
       
    }
}