class Solution {
    public int[] searchRange(int[] nums, int target) {
        
        int l=0,h=nums.length-1;
         int arr[]=new int[2];
        if(nums.length==0)
        {
            arr[0]=-1;
            arr[1]=-1;
            return arr;
        }
         arr[0]=100001;arr[1]=-1;
        
       arr[0]= Binary_S(arr,nums,target,l,h);
       arr[1]= Binary_S1(arr,nums,target,l,h);
        if(arr[0]==100001)
        {
            arr[0]=-1;
           // return arr;
        }
        return arr;
        
        
    }
        public int Binary_S(int arr[],int []nums,int target,int l,int h)
        {
           
        if(h>=l)
        {
            int mid=(l+h)/2;
            if(nums[mid]==target)
            {
                if(mid<arr[0])
                {
                    arr[0]=mid;
                    return Binary_S(arr,nums,target,l,mid-1);
                }
            }
            
            else if(nums[mid]<target)
                return Binary_S(arr,nums,target,mid+1,h);
            else return Binary_S(arr,nums,target,l,mid-1);
             
        }
            return arr[0];
}
    
     public int Binary_S1(int arr[],int []nums,int target,int l,int h)
        {
           
        if(h>=l)
        {
           // System.out.println(h+" "+l);
            int mid=(l+h)/2;
             //System.out.println(l+" "+h+" "+mid);
            if(nums[mid]==target)
            {
               
                if(mid>arr[1])
                {
                    arr[1]=mid;
                   
                    return Binary_S1(arr,nums,target,mid+1,h);
                }
            }
            
            else if(nums[mid]<target)
                return Binary_S1(arr,nums,target,mid+1,h);
            else if(nums[mid]>target)
                return Binary_S1(arr,nums,target,l,mid-1);
             
        }
            return arr[1];
}
}